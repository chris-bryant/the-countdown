{"map":"{\"version\":3,\"sources\":[\"/Users/chrisbryant/the-countdown/src/App.js\",\"/Users/chrisbryant/the-countdown/src/serviceWorker.js\",\"/Users/chrisbryant/the-countdown/src/index.js\"],\"names\":[\"App\",\"today\",\"moment\",\"startOf\",\"daysLeft\",\"diff\",\"percentDone\",\"Math\",\"floor\",\"csDaysDone\",\"map\",\"day\",\"isAfter\",\"filter\",\"after\",\"length\",\"react_default\",\"a\",\"createElement\",\"className\",\"reactstrap_es\",\"striped\",\"color\",\"value\",\"max\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"uSAiDeA,mLA1CX,IAAMC,EAAQC,GAAAA,GAASC,QAAQ,OAEzBC,EADMF,GAAAA,CAAO,cAAcC,QAAQ,OACpBE,KAAKJ,EAAO,QAC3BK,EAAcC,KAAKC,MAA+B,KAAxB,EAAKJ,EAAW,MAoB1CK,EAnBS,CACbP,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,cACPA,GAAAA,CAAO,eAGiBQ,IAAI,SAAAC,GAAG,OAAIT,GAAAA,GAASU,QAAQD,EAAIR,QAAQ,UACpCU,OAAO,SAAAC,GAAK,QAAMA,IAAOC,OAEvD,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,IAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAA,aAAeZ,EAAf,KACAU,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUC,SAAO,EAACC,MAAM,UAAUC,MAAOjB,KAE3CU,EAAAC,EAAAC,cAAA,IAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAA,eAAiBX,KAAKC,MAAOC,EAAa,GAAM,KAAhD,KACAO,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUC,SAAO,EAACC,MAAM,OAAOC,MAAOd,EAAYe,IAAK,eApCjDC,EAAAA,WCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,EAAAA,EAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport './App.css';\\nimport { Progress } from 'reactstrap';\\nimport moment from 'moment';\\n\\nclass App extends Component {\\n  render() {\\n    const today = moment().startOf('day');\\n    const end = moment('11-14-2019').startOf('day');\\n    const daysLeft = end.diff(today, 'days');\\n    const percentDone = Math.floor((1 - (daysLeft / 365)) * 100);\\n    const csDays = [\\n      moment('03-23-2019'),\\n      moment('03-30-2019'),\\n      moment('04-02-2019'),\\n      moment('04-03-2019'),\\n      moment('04-04-2019'),\\n      moment('04-05-2019'),\\n      moment('04-06-2019'),\\n      moment('04-13-2019'),\\n      moment('04-20-2019'),\\n      moment('04-27-2019'),\\n      moment('04-30-2019'),\\n      moment('05-01-2019'),\\n      moment('05-02-2019'),\\n      moment('05-03-2019'),\\n      moment('05-04-2019')\\n    ];\\n\\n    const isAfterMap = csDays.map(day => moment().isAfter(day.startOf('day')));\\n    const csDaysDone = isAfterMap.filter(after => !!after).length;\\n\\n    return (\\n      <div className=\\\"App\\\">\\n        <div>\\n          <p>\\n            <h5>Removal - {percentDone}%</h5>\\n            <Progress striped color=\\\"success\\\" value={percentDone} />\\n          </p>\\n          <p>\\n            <h5>Community - {Math.floor((csDaysDone / 15) * 100)}%</h5>\\n            <Progress striped color=\\\"info\\\" value={csDaysDone} max={15} />\\n          </p>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{17:function(e,t,n){e.exports=n(31)},24:function(e,t,n){},26:function(e,t,n){},31:function(e,t,n){\"use strict\";n.r(t);var a=n(1),o=n.n(a),r=n(4),c=n.n(r),l=(n(22),n(24),n(11)),i=n(12),u=n(15),s=n(13),m=n(16),f=(n(26),n(8)),d=n(3),p=n.n(d),h=function(e){function t(){return Object(l.a)(this,t),Object(u.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(i.a)(t,[{key:\"render\",value:function(){var e=p()().startOf(\"day\"),t=p()(\"11-14-2019\").startOf(\"day\").diff(e,\"days\"),n=Math.floor(100*(1-t/365)),a=[p()(\"03-23-2019\"),p()(\"03-30-2019\"),p()(\"04-02-2019\"),p()(\"04-03-2019\"),p()(\"04-04-2019\"),p()(\"04-05-2019\"),p()(\"04-06-2019\"),p()(\"04-13-2019\"),p()(\"04-20-2019\"),p()(\"04-27-2019\"),p()(\"04-30-2019\"),p()(\"05-01-2019\"),p()(\"05-02-2019\"),p()(\"05-03-2019\"),p()(\"05-04-2019\")].map(function(e){return p()().isAfter(e.startOf(\"day\"))}).filter(function(e){return!!e}).length;return o.a.createElement(\"div\",{className:\"App\"},o.a.createElement(\"div\",null,o.a.createElement(\"p\",null,o.a.createElement(\"h5\",null,\"Removal - \",n,\"%\"),o.a.createElement(f.a,{striped:!0,color:\"success\",value:n})),o.a.createElement(\"p\",null,o.a.createElement(\"h5\",null,\"Community - \",Math.floor(a/15*100),\"%\"),o.a.createElement(f.a,{striped:!0,color:\"info\",value:a,max:15}))))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(o.a.createElement(h,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[17,2,1]]]);","extractedComments":[]}